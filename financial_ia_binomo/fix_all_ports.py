#!/usr/bin/env python3
"""
Script para corregir autom√°ticamente todos los puertos restantes
"""

import os
import glob
import re

def fix_all_ports():
    """Corrige todos los puertos de 5000 a 8080 en todos los archivos"""
    print("üîß Corrigiendo todos los puertos de 5000 a 8080...")
    
    # Buscar todos los archivos
    all_files = []
    
    # Archivos Python
    all_files.extend(glob.glob("*.py"))
    all_files.extend(glob.glob("**/*.py", recursive=True))
    
    # Archivos de documentaci√≥n
    all_files.extend(glob.glob("*.md"))
    all_files.extend(glob.glob("**/*.md", recursive=True))
    
    # Archivos HTML
    all_files.extend(glob.glob("**/*.html", recursive=True))
    
    # Archivos JSON (excepto config.json que ya est√° corregido)
    json_files = glob.glob("*.json")
    json_files.extend(glob.glob("**/*.json", recursive=True))
    all_files.extend([f for f in json_files if f != "config.json"])
    
    # Archivos de texto
    all_files.extend(glob.glob("*.txt"))
    all_files.extend(glob.glob("**/*.txt", recursive=True))
    
    fixed_files = []
    
    for file_path in all_files:
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                content = f.read()
            
            original_content = content
            
            # Reemplazos espec√≠ficos
            replacements = [
                (':5000', ':8080'),
                ('port=5000', 'port=8080'),
                ('localhost:5000', 'localhost:8080'),
                ('192.168.100.17:5000', '192.168.100.17:8080'),
                ('http://localhost:5000', 'http://localhost:8080'),
                ('http://192.168.100.17:5000', 'http://192.168.100.17:8080'),
                ('API_PORT = 5000', 'API_PORT = 8080'),
                ('"port": 5000', '"port": 8080'),
                ('puerto 5000', 'puerto 8080'),
                ('port 5000', 'port 8080')
            ]
            
            for old, new in replacements:
                content = content.replace(old, new)
            
            if content != original_content:
                with open(file_path, 'w', encoding='utf-8') as f:
                    f.write(content)
                fixed_files.append(file_path)
                print(f"‚úÖ {file_path}")
                
        except Exception as e:
            print(f"‚ùå Error en {file_path}: {e}")
    
    return fixed_files

def create_unified_runner():
    """Crea un script unificado para ejecutar el sistema"""
    print("üöÄ Creando script unificado...")
    
    runner_script = '''#!/usr/bin/env python3
"""
IA Financiera Binomo - Ejecutor Unificado
=========================================

Este script ejecuta el sistema completo desde cualquier ubicaci√≥n.
"""

import os
import sys
import subprocess
import json
import time

def load_config():
    """Carga la configuraci√≥n"""
    try:
        with open('config.json', 'r') as f:
            return json.load(f)
    except:
        return None

def main():
    """Funci√≥n principal"""
    print("üöÄ IA FINANCIERA BINOMO - SISTEMA UNIFICADO")
    print("=" * 50)
    
    config = load_config()
    if config:
        print(f"üìã Puerto API: {config['api']['port']}")
        print(f"üìã Host: {config['api']['host']}")
        print(f"üìã URL Base: {config['api']['base_url']}")
    
    print("\\nüéØ ¬øQu√© quieres ejecutar?")
    print("1. Servidor API")
    print("2. Aplicaci√≥n m√≥vil")
    print("3. Ambos servicios")
    print("4. Salir")
    
    choice = input("\\nSelecciona una opci√≥n (1-4): ").strip()
    
    if choice == '1':
        print("\\nüöÄ Iniciando servidor API...")
        subprocess.run([sys.executable, 'start_api.py'])
        
    elif choice == '2':
        print("\\nüì± Iniciando aplicaci√≥n m√≥vil...")
        os.chdir('mobile_app')
        subprocess.run([sys.executable, 'app.py'])
        
    elif choice == '3':
        print("\\nüöÄ Iniciando ambos servicios...")
        print("‚ö†Ô∏è Ejecutando servidor API en segundo plano...")
        
        # Iniciar API en segundo plano
        api_process = subprocess.Popen([sys.executable, 'start_api.py'])
        
        # Esperar a que inicie
        time.sleep(3)
        
        print("üì± Iniciando aplicaci√≥n m√≥vil...")
        os.chdir('mobile_app')
        subprocess.run([sys.executable, 'app.py'])
        
        # Terminar API
        api_process.terminate()
        
    elif choice == '4':
        print("üëã ¬°Hasta luego!")
        
    else:
        print("‚ùå Opci√≥n inv√°lida")

if __name__ == '__main__':
    main()
'''
    
    with open('run_unified.py', 'w', encoding='utf-8') as f:
        f.write(runner_script)
    
    print("   ‚úÖ run_unified.py creado")

def update_documentation():
    """Actualiza la documentaci√≥n principal"""
    print("üìö Actualizando documentaci√≥n...")
    
    # Actualizar README.md
    readme_content = '''# ü§ñ IA Financiera Binomo

Sistema completo de inteligencia artificial para trading en Binomo con modelo Random Forest optimizado.

## üöÄ Inicio R√°pido

### 1. Instalaci√≥n
```bash
pip install -r requirements.txt
```

### 2. Ejecuci√≥n
```bash
# Opci√≥n 1: Script unificado (recomendado)
python run_unified.py

# Opci√≥n 2: Servidor API directamente
python start_api.py

# Opci√≥n 3: Aplicaci√≥n m√≥vil
python mobile_app/app.py
```

### 3. Acceso
- **API Local**: http://localhost:8080
- **API Red**: http://192.168.100.17:8080
- **App M√≥vil**: http://192.168.100.17:8080

## üìä Endpoints Disponibles

### API
- `GET /` - P√°gina principal
- `GET /health` - Estado del sistema
- `GET /predict` - Predicciones
- `GET /backtest` - Backtest del modelo

### Ejemplos de Uso
```bash
# Verificar estado
curl http://localhost:8080/health

# Obtener predicci√≥n
curl http://localhost:8080/predict

# Ejecutar backtest
curl http://localhost:8080/backtest
```

## ‚öôÔ∏è Configuraci√≥n

El sistema usa `config.json` para toda la configuraci√≥n:
- Puerto API: 8080
- IP Local: 192.168.100.17
- Modelo: Random Forest

## üõ†Ô∏è Soluci√≥n de Problemas

### Error: "No module named..."
```bash
pip install -r requirements.txt
```

### Error: "Modelo no cargado"
```bash
python recreate_model.py
```

### Puerto ocupado
Cambiar el puerto en `config.json`:
```json
{
  "api": {
    "port": 8081
  }
}
```

## üì± Aplicaci√≥n M√≥vil

La aplicaci√≥n m√≥vil incluye:
- Interfaz responsive
- Predicciones en tiempo real
- Backtesting visual
- C√≥digo QR para acceso m√≥vil
- PWA (Progressive Web App)

## üîß Desarrollo

### Estructura del Proyecto
```
financial_ia_binomo/
‚îú‚îÄ‚îÄ start_api.py          # Servidor API principal
‚îú‚îÄ‚îÄ mobile_app/           # Aplicaci√≥n m√≥vil
‚îú‚îÄ‚îÄ src/                  # C√≥digo fuente
‚îú‚îÄ‚îÄ models/               # Modelos entrenados
‚îú‚îÄ‚îÄ data/                 # Datos de mercado
‚îú‚îÄ‚îÄ config.json           # Configuraci√≥n centralizada
‚îî‚îÄ‚îÄ requirements.txt      # Dependencias
```

### Scripts Disponibles
- `start_api.py` - Servidor API
- `mobile_app/app.py` - Aplicaci√≥n m√≥vil
- `run_unified.py` - Ejecutor unificado
- `recreate_model.py` - Recrear modelo
- `test_api.py` - Probar API

## üìà Caracter√≠sticas

- ‚úÖ Modelo Random Forest optimizado
- ‚úÖ API REST completa
- ‚úÖ Aplicaci√≥n m√≥vil responsive
- ‚úÖ Backtesting autom√°tico
- ‚úÖ Gesti√≥n de riesgo
- ‚úÖ Configuraci√≥n centralizada
- ‚úÖ Documentaci√≥n completa

## ‚ö†Ô∏è Advertencias

- Este sistema es para fines educativos
- No garantiza ganancias en trading real
- Siempre prueba en demo antes de usar dinero real

## üìû Soporte

- Revisa los logs en `logs/`
- Consulta la documentaci√≥n
- Verifica `config.json` para ajustes

---
**Desarrollado con ‚ù§Ô∏è para an√°lisis financiero**
'''
    
    with open('README.md', 'w', encoding='utf-8') as f:
        f.write(readme_content)
    
    print("   ‚úÖ README.md actualizado")

def main():
    """Funci√≥n principal"""
    print("üîß CORRECCI√ìN COMPLETA DEL SISTEMA")
    print("=" * 50)
    
    # Corregir puertos
    fixed_files = fix_all_ports()
    
    # Crear script unificado
    create_unified_runner()
    
    # Actualizar documentaci√≥n
    update_documentation()
    
    print("\n‚úÖ CORRECCI√ìN COMPLETADA")
    print("=" * 50)
    print(f"üìù Archivos corregidos: {len(fixed_files)}")
    print("üöÄ Script unificado creado: run_unified.py")
    print("üìö Documentaci√≥n actualizada")
    
    print("\nüéØ Pr√≥ximos pasos:")
    print("1. Ejecutar: python run_unified.py")
    print("2. O directamente: python start_api.py")
    print("3. Acceder a: http://localhost:8080")
    print("4. Probar endpoints: /health, /predict, /backtest")
    
    print("\nüì± Para la app m√≥vil:")
    print("1. Ejecutar: python mobile_app/app.py")
    print("2. Acceder desde m√≥vil: http://192.168.100.17:8080")
    print("3. Escanear c√≥digo QR en: http://192.168.100.17:8080/qr")

if __name__ == '__main__':
    main() 